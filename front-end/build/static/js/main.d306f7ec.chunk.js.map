{"version":3,"sources":["components/theme/custom_theme.ts","components/icons/LoadingIcon.tsx","components/design/home/Home.tsx","App.tsx","default/serviceWorker.ts","index.tsx"],"names":["theme","colors","LoadingIcon","color","size","width","height","stroke","viewBox","fill","fill-rule","stroke-width","cx","cy","r","attributeName","begin","dur","values","calcMode","keyTimes","keySplines","repeatCount","Home","useState","showMeme","setShowMeme","Flex","direction","justify","align","paddingTop","Box","onMouseOver","onMouseOut","Image","src","className","marginTop","Heading","position","display","justifyContent","zIndex","top","left","AppBase","exact","path","App","ThemeProvider","customTheme","ColorModeProvider","CSSReset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAEe,6BACRA,KADP,IAEIC,OAAO,eACAD,IAAMC,U,uDCGV,SAASC,EAAT,GAAmF,IAAD,IAA3DC,aAA2D,MAAnD,OAAmD,MAA3CC,YAA2C,MAApC,MAAoC,EACrF,OACI,yBAAKC,MAAOD,EAAME,OAAQF,EAAMG,OAAQJ,EAAOK,QAAQ,aACnD,uBAAGC,KAAK,OAAOC,YAAU,UAAUC,eAAa,KAC5C,4BAAQC,GAAG,KAAKC,GAAG,KAAKC,EAAE,KACtB,6BAASC,cAAc,IACnBC,MAAM,KAAKC,IAAI,OACfC,OAAO,QACPC,SAAS,SACTC,SAAS,OACTC,WAAW,uBACXC,YAAY,eAChB,6BAASP,cAAc,iBACnBC,MAAM,KAAKC,IAAI,OACfC,OAAO,OACPC,SAAS,SACTC,SAAS,OACTC,WAAW,sBACXC,YAAY,gBAEpB,4BAAQV,GAAG,KAAKC,GAAG,KAAKC,EAAE,KACtB,6BAASC,cAAc,IACnBC,MAAM,QAAQC,IAAI,OAClBC,OAAO,QACPC,SAAS,SACTC,SAAS,OACTC,WAAW,uBACXC,YAAY,eAChB,6BAASP,cAAc,iBACnBC,MAAM,QAAQC,IAAI,OAClBC,OAAO,OACPC,SAAS,SACTC,SAAS,OACTC,WAAW,sBACXC,YAAY,kB,MCrC7B,SAASC,IAAsB,IAAD,EACDC,oBAAS,GADR,mBAC1BC,EAD0B,KAChBC,EADgB,KAGjC,OACI,kBAACC,EAAA,EAAD,CAAMC,UAAU,MAAMC,QAAQ,SAASC,MAAM,SAASzB,MAAM,OAAO0B,WAAW,OAC1E,kBAACC,EAAA,EAAD,CAAKC,YAAa,kBAAMP,GAAY,IAAOQ,WAAY,kBAAMR,GAAY,KACpED,EACG,kBAACU,EAAA,EAAD,CAAOC,IAAI,yDAAyDC,UAAU,YAAYC,UAAU,WAEpG,oCACI,kBAACC,EAAA,EAAD,CAASC,SAAS,WAAWnC,MAAM,QAAQoC,QAAQ,OAAOC,eAAe,UAAzE,QAEI,kBAACV,EAAA,EAAD,CAAKQ,SAAS,WAAWG,QAAS,EAAGC,KAAM,IAAKC,MAAO,IACnD,kBAAC3C,EAAD,CAAaE,KAAK,MAAMD,MAAM,cCX9D,SAAS2C,IACL,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KACd,kBAACzB,EAAD,SAkBL0B,MAXf,WACI,OACI,kBAACC,EAAA,EAAD,CAAelD,MAAOmD,GAClB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MACA,kBAACP,EAAD,SCZIQ,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCZvCC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDwHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d306f7ec.chunk.js","sourcesContent":["import { theme } from '@chakra-ui/core';\r\n\r\nexport default {\r\n    ...theme,\r\n    colors: {\r\n        ...theme.colors\r\n    },\r\n};\r\n","import { Box } from \"@chakra-ui/core\";\nimport React, { ReactElement } from \"react\";\n\ntype LoadingIcon = {\n    color?: string;\n    size?: string;\n}\n\nexport function LoadingIcon({ color = \"#000\", size = \"100\" }: LoadingIcon): ReactElement {\n    return (\n        <svg width={size} height={size} stroke={color} viewBox=\"0 0 44 44\">\n            <g fill=\"none\" fill-rule=\"evenodd\" stroke-width=\"2\">\n                <circle cx=\"22\" cy=\"22\" r=\"1\">\n                    <animate attributeName=\"r\"\n                        begin=\"0s\" dur=\"1.8s\"\n                        values=\"1; 20\"\n                        calcMode=\"spline\"\n                        keyTimes=\"0; 1\"\n                        keySplines=\"0.165, 0.84, 0.44, 1\"\n                        repeatCount=\"indefinite\" />\n                    <animate attributeName=\"stroke-opacity\"\n                        begin=\"0s\" dur=\"1.8s\"\n                        values=\"1; 0\"\n                        calcMode=\"spline\"\n                        keyTimes=\"0; 1\"\n                        keySplines=\"0.3, 0.61, 0.355, 1\"\n                        repeatCount=\"indefinite\" />\n                </circle>\n                <circle cx=\"22\" cy=\"22\" r=\"1\">\n                    <animate attributeName=\"r\"\n                        begin=\"-0.9s\" dur=\"1.8s\"\n                        values=\"1; 20\"\n                        calcMode=\"spline\"\n                        keyTimes=\"0; 1\"\n                        keySplines=\"0.165, 0.84, 0.44, 1\"\n                        repeatCount=\"indefinite\" />\n                    <animate attributeName=\"stroke-opacity\"\n                        begin=\"-0.9s\" dur=\"1.8s\"\n                        values=\"1; 0\"\n                        calcMode=\"spline\"\n                        keyTimes=\"0; 1\"\n                        keySplines=\"0.3, 0.61, 0.355, 1\"\n                        repeatCount=\"indefinite\" />\n                </circle>\n            </g>\n        </svg>\n    )\n}","import React, { ReactElement, useState } from 'react';\nimport { Flex, Heading, Box, Image } from '@chakra-ui/core';\nimport { LoadingIcon } from '../../icons/LoadingIcon';\nimport './home.css';\n\nexport function Home(): ReactElement {\n    const [showMeme, setShowMeme] = useState(false);\n\n    return (\n        <Flex direction=\"row\" justify=\"center\" align=\"center\" width=\"100%\" paddingTop=\"30%\">\n            <Box onMouseOver={() => setShowMeme(true)} onMouseOut={() => setShowMeme(false)}>\n                {showMeme ? (\n                    <Image src=\"https://media3.giphy.com/media/lgcUUCXgC8mEo/giphy.gif\" className=\"rick-roll\" marginTop=\"-100px\"/>\n                ) : (\n                    <>\n                        <Heading position=\"relative\" width=\"200px\" display=\"flex\" justifyContent=\"center\">\n                            Elite\n                            <Box position=\"absolute\" zIndex={-1} top={-100} left={-25}>\n                                <LoadingIcon size=\"250\" color=\"#fff\" />\n                            </Box>\n                        </Heading>\n                    </>\n                )}\n            </Box>\n        </Flex>\n    );\n}\n","import React, { ReactElement } from 'react';\r\nimport { ThemeProvider, CSSReset, ColorModeProvider } from '@chakra-ui/core';\r\nimport customTheme from './components/theme/custom_theme';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport { Home } from './components/design/home/Home';\r\n\r\nfunction AppBase(): ReactElement {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <Home />\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nfunction App() {\r\n    return (\r\n        <ThemeProvider theme={customTheme}>\r\n            <ColorModeProvider>\r\n                <CSSReset />\r\n                <AppBase />\r\n            </ColorModeProvider>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './default/serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}