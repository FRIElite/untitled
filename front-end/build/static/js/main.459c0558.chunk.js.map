{"version":3,"sources":["components/theme/custom_theme.ts","components/design/navbar/Navbar.tsx","components/icons/LoadingIcon.tsx","components/design/home/Home.tsx","components/design/list/List.tsx","components/design/swipe/Swipe.tsx","App.tsx","default/serviceWorker.ts","index.tsx"],"names":["theme","colors","light","dark","Navbar","useDisclosure","isOpen","onOpen","onClose","useColorMode","colorMode","toggleColorMode","is_light","color_mode_icon","color_mode_color","NavbarDrawer","Drawer","placement","borderBottomWidth","List","styleType","Link","href","color","Flex","width","direction","justify","align","padding","IconButton","variant","variantColor","aria-label","icon","size","onClick","Heading","LoadingIcon","height","stroke","viewBox","fill","fill-rule","stroke-width","cx","cy","r","attributeName","begin","dur","values","calcMode","keyTimes","keySplines","repeatCount","Home","useState","showMeme","setShowMeme","paddingTop","Box","onMouseOver","onMouseOut","Image","src","className","marginTop","position","display","justifyContent","zIndex","top","left","useQuery","fetch","then","res","json","isLoading","data","error","movie_list","React","useMemo","Skeleton","SimpleGrid","columns","spacing","ratedMovies","map","movie_data","MovieDetails","Button","borderRadius","mr","ml","hover","setHover","image_url","settings","bg","onMouseEnter","onMouseLeave","transition","alt","border","Text","title","genres","join","Swipe","rating","setRating","movie_thumb","w","mb","whiteSpace","textAlign","mt","wrap","maxWidth","genre","i","length","fontWeight","children","fontSize","textTransform","pr","pl","h","Array","a","Icon","name","Slider","max","min","defaultValue","onChange","value","AppBase","exact","path","App","ThemeProvider","customTheme","ColorModeProvider","CSSReset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.459c0558.chunk.js","sourcesContent":["import { theme } from '@chakra-ui/core';\r\n\r\ntype Colors = {\r\n\r\n};\r\n\r\nconst light: Colors = {\r\n\r\n};\r\n\r\nconst dark: Colors = {\r\n\r\n};\r\n\r\nexport default {\r\n    ...theme,\r\n    colors: {\r\n        ...theme.colors,\r\n        light,\r\n        dark\r\n    },\r\n};\r\n","import React, { ReactElement } from 'react';\nimport {\n    Flex,\n    Box,\n    Drawer,\n    useDisclosure,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerHeader,\n    DrawerBody,\n    IconButton,\n    useColorMode,\n    Divider,\n    Heading,\n    DrawerCloseButton,\n    Link,\n    List,\n    ListItem,\n} from '@chakra-ui/core';\n\nexport function Navbar(): ReactElement {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const { colorMode, toggleColorMode } = useColorMode();\n\n    const is_light: boolean = colorMode == 'light';\n    const color_mode_icon: any = is_light ? 'sun' : 'moon';\n    const color_mode_color: any = is_light ? 'yellow' : 'gray';\n\n    const NavbarDrawer = (): ReactElement => {\n        return (\n            <Drawer placement=\"right\" onClose={onClose} isOpen={isOpen}>\n                <DrawerOverlay />\n                <DrawerContent>\n                    <DrawerCloseButton />\n                    <DrawerHeader borderBottomWidth=\"1px\">Routes</DrawerHeader>\n                    <DrawerBody>\n                        <List styleType=\"disc\">\n                            <ListItem>\n                                <Link href=\"/\" color=\"cyan.500\">\n                                    Home\n                                </Link>\n                            </ListItem>\n                            <ListItem>\n                                <Link href=\"/list\" color=\"cyan.500\">\n                                    List\n                                </Link>\n                            </ListItem>\n                            <ListItem>\n                                <Link href=\"/swipe\" color=\"cyan.500\">\n                                    Swipe\n                                </Link>\n                            </ListItem>\n                        </List>\n                    </DrawerBody>\n                </DrawerContent>\n            </Drawer>\n        );\n    };\n\n    return (\n        <Flex width=\"100%\" direction=\"column\" justify=\"flex-start\" align=\"center\" padding=\"15px 15px 30px 15px\">\n            <Flex width=\"100%\" direction=\"row\" justify=\"space-between\" align=\"center\">\n                <IconButton\n                    variant=\"ghost\"\n                    variantColor={color_mode_color}\n                    aria-label=\"Call Sage\"\n                    icon={color_mode_icon}\n                    size=\"lg\"\n                    onClick={() => toggleColorMode()}\n                />\n                <Heading size=\"2xl\">Reco</Heading>\n                <IconButton\n                    variant=\"ghost\"\n                    variantColor=\"teal\"\n                    aria-label=\"Call Sage\"\n                    icon=\"drag-handle\"\n                    size=\"lg\"\n                    onClick={onOpen}\n                />\n            </Flex>\n            <NavbarDrawer />\n        </Flex>\n    );\n}\n","import React, { ReactElement } from 'react';\r\n\r\ninterface LoadingIcon {\r\n    color?: string;\r\n    size?: string;\r\n}\r\n\r\nexport function LoadingIcon({ color = '#000', size = '100' }: LoadingIcon): ReactElement {\r\n    return (\r\n        <svg width={size} height={size} stroke={color} viewBox='0 0 44 44'>\r\n            <g fill='none' fill-rule='evenodd' stroke-width='2'>\r\n                <circle cx='22' cy='22' r='1'>\r\n                    <animate attributeName='r'\r\n                        begin='0s' dur='1.8s'\r\n                        values='1; 20'\r\n                        calcMode='spline'\r\n                        keyTimes='0; 1'\r\n                        keySplines='0.165, 0.84, 0.44, 1'\r\n                        repeatCount='indefinite' />\r\n                    <animate attributeName='stroke-opacity'\r\n                        begin='0s' dur='1.8s'\r\n                        values='1; 0'\r\n                        calcMode='spline'\r\n                        keyTimes='0; 1'\r\n                        keySplines='0.3, 0.61, 0.355, 1'\r\n                        repeatCount='indefinite' />\r\n                </circle>\r\n                <circle cx='22' cy='22' r='1'>\r\n                    <animate attributeName='r'\r\n                        begin='-0.9s' dur='1.8s'\r\n                        values='1; 20'\r\n                        calcMode='spline'\r\n                        keyTimes='0; 1'\r\n                        keySplines='0.165, 0.84, 0.44, 1'\r\n                        repeatCount='indefinite' />\r\n                    <animate attributeName='stroke-opacity'\r\n                        begin='-0.9s' dur='1.8s'\r\n                        values='1; 0'\r\n                        calcMode='spline'\r\n                        keyTimes='0; 1'\r\n                        keySplines='0.3, 0.61, 0.355, 1'\r\n                        repeatCount='indefinite' />\r\n                </circle>\r\n            </g>\r\n        </svg>\r\n    );\r\n}\r\n","import { Box, Flex, Heading, Image } from '@chakra-ui/core';\r\nimport React, { ReactElement, useState } from 'react';\r\nimport { LoadingIcon } from '../../icons/LoadingIcon';\r\nimport './home.css';\r\n\r\nexport function Home(): ReactElement {\r\n    const [showMeme, setShowMeme] = useState(false);\r\n\r\n    return (\r\n        <Flex   direction='row'\r\n                justify='center'\r\n                align='center'\r\n                width='100%'\r\n                paddingTop='30%'>\r\n            <Box onMouseOver={() => setShowMeme(true)}\r\n                 onMouseOut={() => setShowMeme(false)}>\r\n                {showMeme ? (\r\n                    <Image src='https://media3.giphy.com/media/lgcUUCXgC8mEo/giphy.gif'\r\n                           className='rick-roll'\r\n                           marginTop='-100px'/>\r\n                ) : (\r\n                    <>\r\n                        <Heading position='relative'\r\n                                 width='200px'\r\n                                 display='flex'\r\n                                 justifyContent='center'>\r\n                            Elite\r\n                            <Box position='absolute'\r\n                                 zIndex={-1}\r\n                                 top={-100}\r\n                                 left={-25}>\r\n                                <LoadingIcon size='250' />\r\n                            </Box>\r\n                        </Heading>\r\n                    </>\r\n                )}\r\n            </Box>\r\n        </Flex>\r\n    );\r\n}\r\n","import { Box, Flex, Text, SimpleGrid, Image, Button, Skeleton } from '@chakra-ui/core';\nimport React, { ReactElement } from 'react';\nimport { useQuery } from 'react-query';\n\nconst movies_data = [\n    {\n        image_url:\n            'https://m.media-amazon.com/images/M/MV5BNDYxNjQyMjAtNTdiOS00NGYwLWFmNTAtNThmYjU5ZGI2YTI1XkEyXkFqcGdeQXVyMTMxODk2OTU@._V1_.jpg',\n        title: 'The Avengers',\n        release_date: '4th May 2012',\n        genres: ['Action', 'Adventure', 'Sci-Fi'],\n    },\n    {\n        image_url:\n            'https://m.media-amazon.com/images/M/MV5BNDYxNjQyMjAtNTdiOS00NGYwLWFmNTAtNThmYjU5ZGI2YTI1XkEyXkFqcGdeQXVyMTMxODk2OTU@._V1_.jpg',\n        title: 'The Avengers',\n        release_date: '4th May 2012',\n        genres: ['Action', 'Adventure', 'Sci-Fi'],\n    },\n    {\n        image_url:\n            'https://m.media-amazon.com/images/M/MV5BNDYxNjQyMjAtNTdiOS00NGYwLWFmNTAtNThmYjU5ZGI2YTI1XkEyXkFqcGdeQXVyMTMxODk2OTU@._V1_.jpg',\n        title: 'The Avengers',\n        release_date: '4th May 2012',\n        genres: ['Action', 'Adventure', 'Sci-Fi'],\n    },\n    {\n        image_url:\n            'https://m.media-amazon.com/images/M/MV5BNDYxNjQyMjAtNTdiOS00NGYwLWFmNTAtNThmYjU5ZGI2YTI1XkEyXkFqcGdeQXVyMTMxODk2OTU@._V1_.jpg',\n        title: 'The Avengers',\n        release_date: '4th May 2012',\n        genres: ['Action', 'Adventure', 'Sci-Fi'],\n    },\n    {\n        image_url:\n            'https://m.media-amazon.com/images/M/MV5BNDYxNjQyMjAtNTdiOS00NGYwLWFmNTAtNThmYjU5ZGI2YTI1XkEyXkFqcGdeQXVyMTMxODk2OTU@._V1_.jpg',\n        title: 'The Avengers',\n        release_date: '4th May 2012',\n        genres: ['Action', 'Adventure', 'Sci-Fi'],\n    },\n];\n\nexport function List(): ReactElement {\n    let { isLoading, error, data }: any = useQuery<any, any>('repoData', () =>\n        fetch('https://untitled-app-001.herokuapp.com/user/test1').then((res) => res.json())\n    );\n\n    const movie_list = React.useMemo(() => {\n        if(isLoading) return <Skeleton width=\"100%\" height=\"100px\" />\n        return (\n            <SimpleGrid columns={1} spacing={1}>\n                {data?.[0].ratedMovies?.map((movie_data: any) => (\n                    <MovieDetails movie_data={movie_data} />\n                ))}\n                <Button borderRadius=\"0px\">Load more</Button>\n            </SimpleGrid>\n        );\n    }, [data]);\n    return (\n        <Box mr=\"15px\" ml=\"15px\">\n            {movie_list}\n        </Box>\n    );\n}\nfunction MovieDetails({ movie_data }: any) {\n    const [hover, setHover] = React.useState(false);\n    movie_data.image_url =\n        'https://m.media-amazon.com/images/M/MV5BNDYxNjQyMjAtNTdiOS00NGYwLWFmNTAtNThmYjU5ZGI2YTI1XkEyXkFqcGdeQXVyMTMxODk2OTU@._V1_.jpg';\n    const settings = hover\n        ? {\n              height: '250px',\n          }\n        : {\n              height: '80px',\n          };\n    return (\n        <Flex\n            bg=\"tomato\"\n            padding=\"5px 5px 5px 5px\"\n            onMouseEnter={() => setHover(true)}\n            onMouseLeave={() => setHover(false)}\n            transition=\"ease-in-out height 0.5s\"\n            direction=\"row\"\n            justify=\"flex-start\"\n            {...settings}\n        >\n            <Image\n                height=\"100%\"\n                src={movie_data?.image_url}\n                alt=\"Dan Abramov\"\n                border=\"1px solid white\"\n                // borderColor={is_light ? 'black' : 'white'}\n            />\n            <Text>{movie_data.title}</Text>\n            <Text>{movie_data.genres.join(', ')}</Text>\n        </Flex>\n    );\n}\n","import React, { ReactElement, Component } from 'react';\nimport {\n    AspectRatioBox,\n    Flex,\n    Heading,\n    IconButton,\n    Image,\n    useColorMode,\n    Text,\n    Slider,\n    SliderTrack,\n    SliderFilledTrack,\n    SliderThumb,\n    Box,\n    Tag,\n    Icon,\n    Button,\n    Skeleton,\n} from '@chakra-ui/core';\nimport { useQuery, QueryCache, ReactQueryCacheProvider } from 'react-query';\nimport { useTrail, animated } from 'react-spring';\nexport function Swipe(): ReactElement {\n    let { isLoading, error, data }: any = useQuery<any, any>('repoData', () =>\n        fetch('https://untitled-app-001.herokuapp.com/recommend/test1').then((res) => res.json())\n    );\n    const [rating, setRating] = React.useState(5);\n    const { colorMode, toggleColorMode } = useColorMode();\n    const is_light: boolean = colorMode == 'light';\n    const colors = ['red', 'green', 'blue', 'orange', 'purple', 'yellow'];\n\n    const max_rating: number = 10;\n\n    // const movie_data: any = {\n    //     image_url:\n    //         'https://m.media-amazon.com/images/M/MV5BNDYxNjQyMjAtNTdiOS00NGYwLWFmNTAtNThmYjU5ZGI2YTI1XkEyXkFqcGdeQXVyMTMxODk2OTU@._V1_.jpg',\n    //     title: 'The Avengers',\n    //     release_date: '4th May 2012',\n    //     genres: ['Action', 'Adventure', 'Sci-Fi'],\n    // };\n\n    if (data)\n        data.image_url =\n            'https://m.media-amazon.com/images/M/MV5BNDYxNjQyMjAtNTdiOS00NGYwLWFmNTAtNThmYjU5ZGI2YTI1XkEyXkFqcGdeQXVyMTMxODk2OTU@._V1_.jpg';\n\n    const movie_thumb = React.useMemo(\n        () => (\n            <Box position=\"absolute\" top={5}>\n                <Flex direction=\"column\" justify=\"flex-start\" align=\"center\" w=\"200px\">\n                    {isLoading  ? (\n                        <Skeleton width=\"100%\" height=\"300px\"/>\n                    ) : (\n                        <>\n                            <Heading\n                                size=\"lg\"\n                                mb=\"10px\"\n                                width=\"200px\"\n                                whiteSpace=\"normal\"\n                                textAlign=\"center\"\n                                height=\"30px\"\n                            >\n                                {data.title}\n                            </Heading>\n                            <Image\n                                width=\"250px\"\n                                src={data?.image_url}\n                                alt=\"Dan Abramov\"\n                                border=\"2px solid white\"\n                                // borderColor={is_light ? 'black' : 'white'}\n                            />\n                            <Flex\n                                direction=\"row\"\n                                justify=\"flex-start\"\n                                align=\"flex-start\"\n                                mt=\"10px\"\n                                wrap=\"wrap\"\n                                maxWidth=\"100%\"\n                                position=\"relative\"\n                            >\n                                {data.genres?.map((genre: string, i: number) => (\n                                    <Box\n                                        border=\"1px solid #9F7AEA\"\n                                        mb=\"5px\"\n                                        mr={i !== data.genres.length - 1 ? '5px' : '0px'}\n                                        borderRadius=\"4px\"\n                                        padding=\"0px 4px 0px 4px\"\n                                        fontWeight=\"500\"\n                                        color=\"#9F7AEA\"\n                                        children={genre}\n                                        fontSize={10}\n                                        textTransform=\"capitalize\"\n                                    />\n                                ))}\n                            </Flex>\n                        </>\n                    )}\n                </Flex>\n            </Box>\n        ),\n        [data]\n    );\n\n    return (\n        <Flex width=\"100%\" direction=\"column\" justify=\"center\" align=\"center\" mt=\"0px\" pr=\"15%\" pl=\"15%\">\n            <Flex h=\"10px\" width=\"100%\" direction=\"row\" justify=\"center\">\n                {new Array(max_rating).fill(0).map((a: any, i: number) => {\n                    const color: string = i <= rating ? 'yellow.300' : is_light ? 'gray' : 'white';\n                    return <Icon name=\"star\" color={color} mr={i !== 0 ? '3px' : '0px'} />;\n                })}\n            </Flex>\n            <Slider\n                max={max_rating}\n                min={0}\n                defaultValue={rating}\n                onChange={(value: number) => setRating(value)}\n                mt=\"30px\"\n            >\n                <SliderTrack />\n                <SliderFilledTrack />\n                <SliderThumb>\n                    <Box color=\"tomato\" />\n                    {movie_thumb}\n                </SliderThumb>\n            </Slider>\n            <Flex mt=\"450px\" direction=\"row\" w=\"100%\" justify=\"space-evenly\">\n                <Button width=\"30%\" variant=\"solid\" variantColor=\"green\" children=\"Vote\" />\n                <Button width=\"30%\" variant=\"solid\" variantColor=\"blue\" children=\"Skip\" />\n            </Flex>\n        </Flex>\n    );\n}\n","import { ColorModeProvider, CSSReset, ThemeProvider } from '@chakra-ui/core';\r\nimport React, { ReactElement } from 'react';\r\nimport customTheme from './components/theme/custom_theme';\r\nimport { BrowserRouter as Router, Switch, Route, useHistory } from 'react-router-dom';\r\n\r\nimport { Navbar } from './components/design/navbar/Navbar';\r\n\r\n// Routes\r\nimport { Home } from './components/design/home/Home';\r\nimport { List } from './components/design/list/List';\r\nimport { Swipe } from './components/design/swipe/Swipe';\r\n\r\nfunction AppBase(): ReactElement {\r\n    return (\r\n        <Router>\r\n            <Navbar />\r\n            <Switch>\r\n                <Route exact path='/'>\r\n                    <Home />\r\n                </Route>\r\n                <Route exact path=\"/list\">\r\n                    <List />\r\n                </Route>\r\n                <Route exact path=\"/swipe\">\r\n                    <Swipe />\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nfunction App() {\r\n    return (\r\n        <ThemeProvider theme={customTheme}>\r\n            <ColorModeProvider>\r\n                <CSSReset />\r\n                <AppBase />\r\n            </ColorModeProvider>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './default/serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}