{"version":3,"sources":["components/theme/custom_theme.ts","components/design/navbar/Navbar.tsx","components/design/home/Home.tsx","utils/utils.ts","components/design/extra/MovieGenre.tsx","components/design/list/List.tsx","components/design/swipe/Swipe.tsx","components/design/login/LoginComponents.tsx","components/design/login/Login.tsx","components/design/rate/Rate.tsx","components/design/new/New.tsx","App.tsx","default/serviceWorker.ts","index.tsx"],"names":["theme","colors","light","dark","Navbar","useDisclosure","isOpen","onOpen","onClose","useColorMode","colorMode","toggleColorMode","useCookies","cookies","removeCookie","useState","genre","p","topgenres","setTopGenres","is_light","color_mode_icon","color_mode_color","history","useHistory","React","useEffect","fetch","auth","username","then","res","json","Logout","push","window","location","reload","NavbarDrawer","Drawer","placement","borderBottomWidth","Flex","direction","justify","align","Avatar","name","src","Button","variantColor","variant","size","ml","onClick","Box","slice","map","e","width","padding","IconButton","aria-label","icon","Heading","as","Link","to","cursor","Home","randomColor","Math","floor","random","length","SimpleGrid","columns","spacing","mr","mt","height","genres","id","getGenreById","find","MovieGenre","props","border","mb","borderRadius","fontWeight","color","fontSize","textTransform","List","data","setData","showAmount","setShowAmount","movie_list","useMemo","Skeleton","movies","i","ratedMovies","MovieDetails","movie_data","index","hover","setHover","_id","bg","onMouseEnter","onMouseLeave","transition","Image","poster_path","alt","title","genre_ids","children","Text","release_date","overview","Array","fill","a","userRating","Icon","Swipe","setReload","rating","setRating","console","log","movie_thumb","position","top","w","whiteSpace","textAlign","borderColor","wrap","maxWidth","pr","pl","h","Slider","max","min","defaultValue","value","onChange","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","LoginBox","alignItems","Login","setCookie","LoginForm","onSubmit","values","actions","password","setSubmitting","validateName","initialValues","handleSubmit","validate","field","form","FormControl","isInvalid","errors","touched","FormLabel","htmlFor","Input","placeholder","FormErrorMessage","PasswordInput","isLoading","isSubmitting","type","show","setShow","InputGroup","Rate","unratedMovies","hide","setHide","vote","New","PopoverForm","setValues","setValue","selected","setSelected","toast","useToast","ref","useRef","MovieOption","movie","highlighted","setHighlited","current","focus","dangerouslySetInnerHTML","__html","replaceAll","q","target","focusBorderColor","isDisabled","description","status","duration","isClosable","catch","addMovie","AppBase","exact","path","App","ThemeProvider","customTheme","ColorModeProvider","CSSReset","Boolean","hostname","match","library","add","faCheck","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.576c3882.chunk.js","sourcesContent":["import { theme } from '@chakra-ui/core';\n\ntype Colors = {\n\n};\n\nconst light: Colors = {\n\n};\n\nconst dark: Colors = {\n\n};\n\nexport default {\n    ...theme,\n    colors: {\n        ...theme.colors,\n        light,\n        dark\n    },\n};\n","import React, { ReactElement, useState } from 'react';\nimport {\n    Flex,\n    Drawer,\n    useDisclosure,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerHeader,\n    DrawerBody,\n    IconButton,\n    useColorMode,\n    Heading,\n    DrawerCloseButton,\n    List,\n    ListItem,\n    Avatar,\n    Button,\n    Box,\n} from '@chakra-ui/core';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useCookies } from 'react-cookie';\nexport function Navbar(): ReactElement {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const { colorMode, toggleColorMode } = useColorMode();\n    const [cookies, setCookie, removeCookie] = useCookies(['reco']);\n    const [topgenres, setTopGenres] = useState([{ genre: '', p: 0 }]);\n    const is_light: boolean = colorMode == 'light';\n    const color_mode_icon: any = is_light ? 'sun' : 'moon';\n    const color_mode_color: any = is_light ? 'yellow' : 'gray';\n    const history = useHistory();\n\n    React.useEffect(() => {\n        fetch((process.env.REACT_APP_URL || 'localhost') + '/topgenres/' + cookies?.auth?.username)\n            .then((res) => res.json())\n            .then((res) => {\n                setTopGenres(res);\n            });\n    });\n\n    const Logout = () => {\n        removeCookie('auth');\n        history.push('/');\n        window.location.reload();\n    };\n\n    const NavbarDrawer = (): ReactElement => {\n        return (\n            <Drawer placement=\"right\" onClose={onClose} isOpen={isOpen}>\n                <DrawerOverlay />\n                <DrawerContent>\n                    <DrawerCloseButton />\n                    <DrawerHeader borderBottomWidth=\"1px\">\n                        <Flex direction=\"row\" justify=\"flex-start\" align=\"center\">\n                            <Avatar name=\"Dan Abrahmov\" src=\"https://bit.ly/dan-abramov\" />\n                            <Button variantColor=\"red\" variant=\"outline\" size=\"sm\" ml=\"15px\" onClick={Logout}>\n                                Logout\n                            </Button>\n                        </Flex>\n                        <Box>Dan Abrahmov</Box>\n                    </DrawerHeader>\n                    <DrawerBody>\n                        {topgenres.slice(3).map((e) => (\n                            <Box>\n                                {e.genre} - {e.p * 100}%\n                            </Box>\n                        ))}\n                    </DrawerBody>\n                </DrawerContent>\n            </Drawer>\n        );\n    };\n\n    return (\n        <Flex width=\"100%\" direction=\"column\" justify=\"flex-start\" align=\"center\" padding=\"15px 15px 30px 15px\">\n            <Flex width=\"100%\" direction=\"row\" justify=\"space-between\" align=\"center\">\n                <IconButton\n                    variant=\"ghost\"\n                    variantColor={color_mode_color}\n                    aria-label=\"Call Sage\"\n                    icon={color_mode_icon}\n                    size=\"lg\"\n                    onClick={() => toggleColorMode()}\n                />\n                <Heading as={Link} {...{ to: '/' }} size=\"2xl\">\n                    Reco\n                </Heading>\n                <Avatar name=\"Dan Abrahmov\" cursor=\"pointer\" src=\"https://bit.ly/dan-abramov\" onClick={onOpen} />\n            </Flex>\n            <NavbarDrawer />\n        </Flex>\n    );\n}\n","import { Button, SimpleGrid } from '@chakra-ui/core';\nimport React, { ReactElement } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport function Home(): ReactElement {\n    const randomColor = () => {\n        const colors = ['red', 'orange', 'yellow', 'green', 'teal', 'cyan', 'purple'];\n\n        return colors[Math.floor(Math.random() * colors.length)];\n    };\n\n    return (\n        <SimpleGrid columns={2} spacing={10} mr=\"30px\" ml=\"30px\" mt=\"50px\">\n            <Button\n                as={Link}\n                {...{ to: '/swipe' }}\n                height=\"100px\"\n                variant=\"outline\"\n                variantColor={randomColor()}\n                size=\"lg\"\n            >\n                {' '}\n                Swipe{' '}\n            </Button>\n            <Button\n                as={Link}\n                {...{ to: '/list' }}\n                height=\"100px\"\n                variant=\"outline\"\n                variantColor={randomColor()}\n                size=\"lg\"\n            >\n                {' '}\n                List{' '}\n            </Button>\n            <Button\n                as={Link}\n                {...{ to: '/rate' }}\n                height=\"100px\"\n                variant=\"outline\"\n                variantColor={randomColor()}\n                size=\"lg\"\n            >\n                {' '}\n                Rate{' '}\n            </Button>\n            <Button\n                as={Link}\n                {...{ to: '/new' }}\n                height=\"100px\"\n                variant=\"outline\"\n                variantColor={randomColor()}\n                size=\"lg\"\n            >\n                {' '}\n                New{' '}\n            </Button>\n        </SimpleGrid>\n    );\n}\n","export const genres = [\n    {\n        id: 28,\n        name: 'Action',\n    },\n    {\n        id: 12,\n        name: 'Adventure',\n    },\n    {\n        id: 16,\n        name: 'Animation',\n    },\n    {\n        id: 35,\n        name: 'Comedy',\n    },\n    {\n        id: 80,\n        name: 'Crime',\n    },\n    {\n        id: 99,\n        name: 'Documentary',\n    },\n    {\n        id: 18,\n        name: 'Drama',\n    },\n    {\n        id: 10751,\n        name: 'Family',\n    },\n    {\n        id: 14,\n        name: 'Fantasy',\n    },\n    {\n        id: 36,\n        name: 'History',\n    },\n    {\n        id: 27,\n        name: 'Horror',\n    },\n    {\n        id: 10402,\n        name: 'Music',\n    },\n    {\n        id: 9648,\n        name: 'Mystery',\n    },\n    {\n        id: 10749,\n        name: 'Romance',\n    },\n    {\n        id: 878,\n        name: 'Science Fiction',\n    },\n    {\n        id: 10770,\n        name: 'TV Movie',\n    },\n    {\n        id: 53,\n        name: 'Thriller',\n    },\n    {\n        id: 10752,\n        name: 'War',\n    },\n    {\n        id: 37,\n        name: 'Western',\n    },\n];\n\nexport function getGenreById(id: any) {\n    return genres.find((genre: any) => genre.id == id)?.name;\n}\n","import { Box } from '@chakra-ui/core';\nimport React, { ReactElement } from 'react';\n\nexport function MovieGenre({ ...props }: any): ReactElement {\n    return (\n        <Box\n            {...props}\n            border=\"1px solid #9F7AEA\"\n            mb=\"5px\"\n            borderRadius=\"4px\"\n            padding=\"0px 4px 0px 4px\"\n            fontWeight=\"500\"\n            color=\"#9F7AEA\"\n            fontSize={10}\n            textTransform=\"capitalize\"\n        />\n    );\n}\n","import { Box, Flex, Text, SimpleGrid, Image, Button, Skeleton, Heading, Icon, useColorMode } from '@chakra-ui/core';\nimport React, { ReactElement } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { getGenreById } from '../../../utils/utils';\nimport { MovieGenre } from '../extra/MovieGenre';\n\nexport function List(): ReactElement {\n    const [cookies, setCookie, removeCookie] = useCookies(['reco']);\n    const [data, setData] = React.useState<any>();\n    const [showAmount, setShowAmount] = React.useState(5);\n\n    React.useEffect(() => {\n        fetch((process.env.REACT_APP_URL || 'localhost') + '/user/' + cookies?.auth?.username).then((res) => res.json()).then((res) => setData(res))\n    }, []);\n\n    const movie_list = React.useMemo(() => {\n        if (!data) return <Skeleton width=\"100%\" height=\"100px\" />;\n        const movies = [];\n        for (let i = 0; i < data?.ratedMovies?.length || 0; i++) {\n            if (i >= showAmount) break;\n            movies.push(<MovieDetails movie_data={data?.ratedMovies[i]} index={i}/>);\n        }\n        return (\n            <SimpleGrid columns={1} spacing={1}>\n                {movies}\n            </SimpleGrid>\n        );\n    }, [data, showAmount]);\n    return (\n        <Box mr=\"15px\" ml=\"15px\">\n            {movie_list}\n            {showAmount < data?.ratedMovies?.length && (\n                <Button borderRadius=\"0px\" width=\"100%\" mt={1} onClick={() => setShowAmount(showAmount + 5)}>\n                    Load more\n                </Button>\n            )}\n        </Box>\n    );\n}\nfunction MovieDetails({ movie_data, index }: any) {\n    const [hover, setHover] = React.useState(false);\n    const { colorMode, toggleColorMode } = useColorMode();\n    const is_light: boolean = colorMode == 'light';\n    const [cookies, setCookie, removeCookie] = useCookies(['reco']);\n    const [data, setData] = React.useState<any>();\n\n    React.useEffect(() => {\n        fetch((process.env.REACT_APP_URL || 'localhost') + '/movie/' + movie_data._id).then((res) => res.json()).then((res) => {\n            setData(res);\n        });\n    })\n\n    if(!data) return <Skeleton width=\"100%\" height=\"100px\" />;\n    return (\n        <Flex\n            bg={is_light ? 'gray.100' : 'gray.700'}\n            padding=\"5px 5px 5px 5px\"\n            onMouseEnter={() => setHover(true)}\n            onMouseLeave={() => setHover(false)}\n            transition=\"ease-in-out height 0.5s\"\n            direction=\"row\"\n            justify=\"space-between\"\n            height={hover ? '300px' : '80px'}\n        >\n            <Flex direction=\"row\">\n                <Image height=\"100%\" src={data?.poster_path} alt=\"Dan Abramov\" border=\"1px solid white\" />\n                <Flex direction=\"column\" justify=\"flex-start\" height=\"100%\" ml=\"15px\">\n                    <Heading size=\"lg\" mb=\"5px\">\n                        {data.title}\n                    </Heading>\n                    <Flex direction=\"row\" mb=\"10px\">\n                        {data?.genre_ids?.map((genre: string) => (\n                            <MovieGenre mr=\"5px\" children={getGenreById( genre)} />\n                        ))}\n                    </Flex>\n\n                    {hover && (\n                        <Flex direction=\"column\" justify=\"flex-start\">\n                            <Text><b>Release date:</b> {data?.release_date}</Text>\n                            <Text>{data?.overview}</Text>\n                        </Flex>\n                    )}\n                </Flex>\n            </Flex>\n            <Flex direction=\"column\" height=\"100%\" justify=\"flex-start\" mr=\"15px\" mt=\"20px\">\n                <Flex direction=\"row\">\n                    {new Array(10).fill(0).map((a: any, i: number) => {\n                        const color: string = i < movie_data.userRating ? 'yellow.300' : is_light ? 'gray.300' : 'white';\n                        return <Icon name=\"star\" color={color} mr=\"3px\" size=\"30px\" />;\n                    })}\n                </Flex>\n            </Flex>\n        </Flex>\n    );\n}","import React, { ReactElement } from 'react';\nimport {\n    Flex,\n    Heading,\n    Image,\n    useColorMode,\n    Slider,\n    SliderTrack,\n    SliderFilledTrack,\n    SliderThumb,\n    Box,\n    Icon,\n    Button,\n    Skeleton,\n} from '@chakra-ui/core';\nimport { MovieGenre } from '../extra/MovieGenre';\nimport { useCookies } from 'react-cookie';\nimport { getGenreById } from '../../../utils/utils';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nexport function Swipe(): ReactElement {\n    const [reload, setReload] = React.useState(true);\n    const [cookies, setCookie, removeCookie] = useCookies(['reco']);\n    const [data, setData] = React.useState<any>();\n    const [rating, setRating] = React.useState(5);\n    const { colorMode } = useColorMode();\n    const is_light: boolean = colorMode == 'light';\n\n    const max_rating: number = 10;\n\n    React.useEffect(() => {\n        console.log((process.env.REACT_APP_URL || 'localhost') + '/recommend/' + cookies?.auth?.username);\n        fetch((process.env.REACT_APP_URL || 'localhost') + '/recommend/' + cookies?.auth?.username)\n            .then((res) => res.json())\n            .then((res) => {\n                return fetch((process.env.REACT_APP_URL || 'localhost') + '/movie/' + res._id).then((res) =>\n                    res.json()\n                );\n            })\n            .then((res) => setData(res))\n            .then(() => setRating(5));\n    }, [reload]);\n\n    const movie_thumb = React.useMemo(\n        () => (\n            <Box position=\"absolute\" top={5}>\n                <Flex direction=\"column\" justify=\"flex-start\" align=\"center\" w=\"200px\">\n                    {!data ? (\n                        <Skeleton width=\"100%\" height=\"300px\" />\n                    ) : (\n                        <>\n                            <Heading size=\"lg\" mb=\"10px\" width=\"300px\" whiteSpace=\"normal\" textAlign=\"center\">\n                                {data.title}\n                            </Heading>\n                            <Image\n                                width=\"250px\"\n                                src={data?.poster_path}\n                                alt=\"Dan Abramov\"\n                                border=\"2px solid white\"\n                                borderColor={is_light ? 'black' : 'white'}\n                            />\n                            <Flex\n                                direction=\"row\"\n                                justify=\"flex-start\"\n                                align=\"flex-start\"\n                                mt=\"10px\"\n                                wrap=\"wrap\"\n                                maxWidth=\"100%\"\n                                position=\"relative\"\n                            >\n                                {data.genre_ids?.map((genre: string, i: number) => (\n                                    <MovieGenre\n                                        mr={i !== data.genre_ids.length - 1 ? '5px' : '0px'}\n                                        children={getGenreById(genre)}\n                                    />\n                                ))}\n                            </Flex>\n                        </>\n                    )}\n                </Flex>\n            </Box>\n        ),\n        [data]\n    );\n\n    const vote = () => {\n        if (!data) return;\n\n        fetch((process.env.REACT_APP_URL || 'localhost') + '/vote/' + cookies?.auth?.username, {\n            method: 'PUT',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            redirect: 'follow',\n            referrerPolicy: 'no-referrer',\n            body: JSON.stringify({\n                _id: data._id,\n                userRating: rating,\n            }),\n        }).then(() => setReload(!reload));\n    };\n\n    return (\n        <Flex width=\"100%\" direction=\"column\" justify=\"center\" align=\"center\" mt=\"0px\" pr=\"15%\" pl=\"15%\">\n            <Flex h=\"10px\" width=\"100%\" direction=\"row\" justify=\"center\">\n                {new Array(max_rating).fill(0).map((a: any, i: number) => {\n                    const color: string = i < rating ? 'yellow.300' : is_light ? 'gray.300' : 'white';\n                    return <Icon name=\"star\" color={color} mr=\"3px\" size=\"30px\" />;\n                })}\n            </Flex>\n            <Slider\n                max={max_rating}\n                min={0}\n                defaultValue={rating}\n                value={rating}\n                onChange={(value: number) => setRating(value)}\n                mt=\"35px\"\n            >\n                <SliderTrack />\n                <SliderFilledTrack />\n                <SliderThumb>\n                    <Box color=\"tomato\" />\n                    {movie_thumb}\n                </SliderThumb>\n            </Slider>\n            <Flex mt=\"500px\" direction=\"row\" w=\"80%\" justify=\"space-evenly\">\n                <Button width=\"30%\" variant=\"solid\" variantColor=\"green\" onClick={vote}>\n                    <Box mr=\"10px\">Vote</Box> <FontAwesomeIcon icon=\"check\" />\n                </Button>\n                <Button\n                    width=\"30%\"\n                    variant=\"solid\"\n                    variantColor=\"blue\"\n                    children=\"Skip\"\n                    onClick={() => setReload(!reload)}\n                />\n            </Flex>\n        </Flex>\n    );\n}\n","import React, { ReactElement } from 'react';\nimport { Flex } from '@chakra-ui/core';\n\nexport const LoginBox = ({ ...props }: any): ReactElement => (\n    <Flex\n        {...props} \n        width=\"100%\"\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n        mt=\"50px\"\n    />\n);\n","import React, { ReactElement } from 'react';\nimport { useCookies } from 'react-cookie';\nimport {\n    FormControl,\n    FormLabel,\n    Input,\n    InputGroup,\n    InputRightElement,\n    IconButton,\n    FormErrorMessage,\n    Button,\n    Heading,\n} from '@chakra-ui/core';\nimport { Formik, Field } from 'formik';\nimport { LoginBox } from './LoginComponents';\nimport { LoginFormInputs } from './LoginTypes';\nimport { useHistory } from 'react-router-dom';\n\nexport function Login(): ReactElement {\n    const [cookies, setCookie, removeCookie] = useCookies(['reco']);\n    const history = useHistory();\n\n    const onSubmit = (values: LoginFormInputs, actions: any) => {\n        setCookie('auth', {\n            username: values.username,\n            password: values.password,\n        });\n        history.push('/');\n        actions.setSubmitting(false);\n        window.location.reload();\n    };\n\n    return (\n        <LoginBox>\n            <Heading mb={3}>Login</Heading>\n            <LoginForm onSubmit={onSubmit} />\n        </LoginBox>\n    );\n}\n\nfunction LoginForm({ onSubmit, ...props }: any): ReactElement {\n    function validateName(value: any) {\n        return false;\n        let error;\n        if (!value) {\n            error = 'Name is required';\n        } else if (value !== 'Naruto') {\n            error = \"Jeez! You're not a fan 😱\";\n        }\n        return error;\n    }\n\n    return (\n        <Formik initialValues={{}} onSubmit={onSubmit}>\n            {(props: any) => (\n                <form onSubmit={props.handleSubmit}>\n                    <Field name=\"username\" validate={validateName}>\n                        {({ field, form }: any) => (\n                            <FormControl isInvalid={form.errors.name && form.touched.name} mb={3}>\n                                <FormLabel htmlFor=\"username\">Username</FormLabel>\n                                <Input {...field} id=\"username\" placeholder=\"Username\" />\n                                <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                            </FormControl>\n                        )}\n                    </Field>\n                    <Field name=\"password\" validate={validateName}>\n                        {({ field, form }: any) => (\n                            <FormControl isInvalid={form.errors.name && form.touched.name}>\n                                <FormLabel htmlFor=\"password\">Password</FormLabel>\n                                <PasswordInput {...field} id=\"password\" placeholder=\"password\" />\n                                <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                            </FormControl>\n                        )}\n                    </Field>\n                    <Button mt={4} variantColor=\"green\" isLoading={props.isSubmitting} type=\"submit\" width=\"100%\">\n                        Submit\n                    </Button>\n                </form>\n            )}\n        </Formik>\n    );\n}\n\nfunction PasswordInput({ ...props }: any): ReactElement {\n    const [show, setShow] = React.useState(false);\n    const handleClick = () => setShow(!show);\n\n    return (\n        <InputGroup size=\"md\">\n            <Input {...props} pr=\"4.5rem\" type={show ? 'text' : 'password'} placeholder=\"Enter password\" />\n            <InputRightElement width=\"3rem\">\n                <IconButton\n                    h=\"1.75rem\"\n                    size=\"sm\"\n                    onClick={handleClick}\n                    aria-label=\"password_input\"\n                    icon={show ? 'view' : 'view-off'}\n                />\n            </InputRightElement>\n        </InputGroup>\n    );\n}\n","import {\n    Box,\n    Flex,\n    SimpleGrid,\n    Image,\n    Button,\n    Skeleton,\n    Heading,\n    useColorMode,\n    IconButton,\n} from '@chakra-ui/core';\nimport React, { ReactElement } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { getGenreById } from '../../../utils/utils';\nimport { MovieGenre } from '../extra/MovieGenre';\n\nexport function Rate(): ReactElement {\n    const [cookies, setCookie, removeCookie] = useCookies(['reco']);\n    const [data, setData] = React.useState<any>();\n\n    const [showAmount, setShowAmount] = React.useState(5);\n\n    React.useEffect(() => {\n        fetch((process.env.REACT_APP_URL || 'localhost') + '/user/' + cookies?.auth?.username).then((res) => res.json()).then((res) => setData(res))\n    }, []);\n\n    const movie_list = React.useMemo(() => {\n        if (!data) return <Skeleton width=\"100%\" height=\"100px\" />;\n        const movies = [];\n        for (let i = 0; i < data?.unratedMovies?.length || 0; i++) {\n            if (i >= showAmount) break;\n            movies.push(<MovieDetails movie_data={data?.unratedMovies[i]} index={i} />);\n        }\n        return (\n            <SimpleGrid columns={1} spacing={1}>\n                {movies}\n            </SimpleGrid>\n        );\n    }, [data, showAmount]);\n    return (\n        <Box mr=\"15px\" ml=\"15px\">\n            {movie_list}\n            {showAmount < data?.unratedMovies?.length && (\n                <Button borderRadius=\"0px\" width=\"100%\" mt={1} onClick={() => setShowAmount(showAmount + 5)}>\n                    Load more\n                </Button>\n            )}\n        </Box>\n    );\n}\nfunction MovieDetails({ movie_data, index }: any) {\n    const [hover, setHover] = React.useState(-1);\n    const { colorMode } = useColorMode();\n    const is_light: boolean = colorMode == 'light';\n    const [cookies, setCookie, removeCookie] = useCookies(['reco']);\n    const [hide, setHide] = React.useState(false);\n\n    const [data, setData] = React.useState<any>();\n    React.useEffect(() => {\n        fetch((process.env.REACT_APP_URL || 'localhost') + '/movie/' + movie_data._id)\n            .then((res) => res.json())\n            .then((res) => {\n                setData(res);\n            });\n    });\n    const vote = (rating: number) => {\n        if (!data) return;\n\n        fetch((process.env.REACT_APP_URL || 'localhost') + '/vote/' + cookies?.auth?.username, {\n            method: 'PUT',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            redirect: 'follow',\n            referrerPolicy: 'no-referrer',\n            body: JSON.stringify({\n                _id: data._id,\n                userRating: rating,\n            }),\n        }).then(() => setHide(true));\n    };\n    if (hide) return <></>;\n    if (!data) return <Skeleton width=\"100%\" height=\"100px\" />;\n    return (\n        <Flex\n            bg={is_light ? 'gray.100' : 'gray.700'}\n            padding=\"5px 5px 5px 5px\"\n            transition=\"ease-in-out height 0.5s\"\n            direction=\"row\"\n            justify=\"space-between\"\n            height={'80px'}\n        >\n            <Flex direction=\"row\">\n                <Image height=\"100%\" src={data?.poster_path} alt=\"Dan Abramov\" border=\"1px solid white\" />\n                <Flex direction=\"column\" justify=\"flex-start\" height=\"100%\" ml=\"15px\">\n                    <Heading size=\"lg\" mb=\"5px\">\n                        {data.title}\n                    </Heading>\n                    <Flex direction=\"row\" mb=\"10px\">\n                        {data?.genre_ids?.map((genre: string) => (\n                            <MovieGenre mr=\"5px\" children={getGenreById(genre)} />\n                        ))}\n                    </Flex>\n                </Flex>\n            </Flex>\n            <Flex direction=\"column\" height=\"100%\" justify=\"center\" align=\"center\" mr=\"15px\">\n                <Flex direction=\"row\">\n                    {new Array(10).fill(0).map((a: any, i: number) => {\n                        const color: string = i <= hover ? 'yellow.300' : is_light ? 'gray.300' : 'white';\n                        return (\n                            <IconButton\n                                aria-label=\"\"\n                                variant=\"ghost\"\n                                color={color}\n                                mr=\"3px\"\n                                icon=\"star\"\n                                onClick={() => vote(i + 1)}\n                                onMouseEnter={() => setHover(i)}\n                                onMouseLeave={() => setHover(-1)}\n                            />\n                        );\n                    })}\n                </Flex>\n            </Flex>\n        </Flex>\n    );\n}","import {\n    Button,\n    Flex,\n    Heading,\n    Image,\n    Input,\n    InputGroup,\n    InputRightElement,\n    Text,\n    useColorMode,\n    useToast,\n} from '@chakra-ui/core';\nimport React, { ReactElement } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { getGenreById } from '../../../utils/utils';\nimport { MovieGenre } from '../extra/MovieGenre';\n\nexport function New(): ReactElement {\n    return (\n        <Flex direction=\"row\" justify=\"center\" width=\"100%\">\n            <PopoverForm />\n        </Flex>\n    );\n}\nconst PopoverForm = () => {\n    const [cookies, setCookie, removeCookie] = useCookies(['reco']);\n    const { colorMode, toggleColorMode } = useColorMode();\n    const is_light: boolean = colorMode == 'light';\n    const [values, setValues] = React.useState([]);\n    const [value, setValue] = React.useState('');\n    const [selected, setSelected] = React.useState<any>();\n    const [add, setAdd] = React.useState(false);\n    const toast = useToast();\n    const ref: any = React.useRef();\n\n    const updateValues = (q: any) => {\n        if (selected?.title) setSelected({});\n        setValue(q);\n        if (q == '') return setValues([]);\n        return fetch((process.env.REACT_APP_URL || 'localhost') + `/movie?q=${q}`)\n            .then((res) => res.json())\n            .then((res) => setValues(res));\n    };\n\n    const MovieOption = ({ movie }: any) => {\n        const [highlighted, setHighlited] = React.useState(false);\n        return (\n            <Flex\n                direction=\"row\"\n                justify=\"flex-start\"\n                onClick={() => {\n                    setValue(movie.title);\n                    setSelected(movie);\n                    ref.current.focus();\n                }}\n                cursor=\"pointer\"\n                bg={highlighted ? is_light ? 'gray.100' : 'gray.600' : ''}\n                onMouseEnter={() => setHighlited(true)}\n                onMouseLeave={() => setHighlited(false)}\n                pl={1}\n            >\n                <div dangerouslySetInnerHTML={{ __html: movie.title.replaceAll(value, `<b>${value}</b>`) }} />\n            </Flex>\n        );\n    };\n\n    const addMovie = (data: any) => {\n        if (!data) return;\n\n        fetch((process.env.REACT_APP_URL || 'localhost') + '/addunrated/' + cookies?.auth?.username, {\n            method: 'PUT',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            redirect: 'follow',\n            referrerPolicy: 'no-referrer',\n            body: JSON.stringify({\n                _id: data._id,\n                userRating: 0,\n            }),\n        })\n            .then(() =>\n                toast({\n                    title: data.title,\n                    description: 'was added.',\n                    status: 'success',\n                    duration: 3000,\n                    isClosable: true,\n                    position: \"bottom-right\",\n                })\n            )\n            .catch(() =>\n                toast({\n                    title: data.title,\n                    description: 'failed to add.',\n                    status: 'error',\n                    duration: 3000,\n                    isClosable: true,\n                    position: \"bottom-right\",\n                })\n            );\n    };\n\n    return (\n        <Flex direction=\"column\" width=\"100%\" pl={10} pr={10}>\n            <Flex></Flex>\n            <InputGroup size=\"lg\">\n                <Input\n                    ref={ref}\n                    variant=\"flushed\"\n                    placeholder=\"Enter name\"\n                    onChange={(e: any) => updateValues(e.target.value)}\n                    width=\"100%\"\n                    focusBorderColor={values?.length > 0 || value == '' ? 'teal.400' : 'red.400'}\n                    mb={1}\n                    pl={1}\n                    value={value}\n                />\n                <InputRightElement width=\"4.5rem\">\n                    <Button h=\"1.75rem\" size=\"md\" variant=\"outline\" variantColor=\"teal\" isDisabled={!selected?.title} onClick={() => addMovie(selected)}>\n                        Add\n                    </Button>\n                </InputRightElement>\n            </InputGroup>\n\n            <Flex direction=\"column\">\n                {values.map((value: any) => (\n                    <MovieOption movie={value} />\n                ))}\n            </Flex>\n\n            {selected?.title && (\n                <Flex\n                    bg={is_light ? 'gray.100' : 'gray.700'}\n                    padding=\"5px 5px 5px 5px\"\n                    transition=\"ease-in-out height 0.5s\"\n                    direction=\"row\"\n                    justify=\"space-between\"\n                    mt=\"15px\"\n                    p={3}\n                >\n                    <Image height=\"200px\" src={selected?.poster_path} alt=\"Dan Abramov\" border=\"1px solid white\" />\n                    <Flex direction=\"column\" justify=\"flex-start\" height=\"100%\" ml=\"30px\">\n                        <Heading size=\"lg\" mb=\"5px\">\n                            {selected?.title}\n                        </Heading>\n                        <Flex direction=\"row\" mb=\"10px\">\n                            {selected?.genre_ids?.map((genre: string) => (\n                                <MovieGenre mr=\"5px\" children={getGenreById(genre)} />\n                            ))}\n                        </Flex>\n                        <Flex direction=\"column\" justify=\"flex-start\">\n                            <Text>\n                                <b>Release date:</b> {selected?.release_date}\n                            </Text>\n                            <Text>{selected?.overview}</Text>\n                        </Flex>\n                    </Flex>\n                </Flex>\n            )}\n        </Flex>\n    );\n};\n","import { ColorModeProvider, CSSReset, ThemeProvider } from '@chakra-ui/core';\nimport React, { ReactElement } from 'react';\nimport customTheme from './components/theme/custom_theme';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { useCookies } from 'react-cookie';\nimport { Navbar } from './components/design/navbar/Navbar';\n\n// Routes\nimport { Home } from './components/design/home/Home';\nimport { List } from './components/design/list/List';\nimport { Swipe } from './components/design/swipe/Swipe';\nimport { Login } from './components/design/login/Login';\nimport { Rate } from './components/design/rate/Rate';\nimport { New } from './components/design/new/New';\n\nfunction AppBase(): ReactElement {\n    const [cookies, setCookie, removeCookie] = useCookies(['reco']);\n    return (\n        <Router>\n            {!cookies?.auth ? <Redirect to=\"/login\" /> : <Navbar />}\n\n            <Switch>\n                <Route exact path=\"/\">\n                    <Home />\n                </Route>\n                <Route exact path=\"/list\">\n                    <List />\n                </Route>\n                <Route path=\"/login\">\n                    <Login />\n                </Route>\n                <Route path=\"/rate\">\n                    <Rate />\n                </Route>\n                <Route path=\"/new\">\n                    <New />\n                </Route>\n                <Route exact path=\"/swipe\">\n                    <Swipe />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nfunction App() {\n    return (\n        <ThemeProvider theme={customTheme}>\n            <ColorModeProvider>\n                <CSSReset />\n                <AppBase />\n            </ColorModeProvider>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './default/serviceWorker';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faCheck);\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}